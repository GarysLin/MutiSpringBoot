plugins {
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
}

subprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: "java"
    apply plugin: "application"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    dependencies {
        testCompile 'junit:junit:4.12'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        runtimeOnly 'org.springframework.boot:spring-boot-starter-tomcat'

        compile 'org.projectlombok:lombok:1.18.6'
        annotationProcessor 'org.projectlombok:lombok:1.18.6'

        compile 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
        compile 'io.jsonwebtoken:jjwt:0.7.0'
        compile 'org.apache.httpcomponents:httpclient:4.5.8'
        compile 'com.google.guava:guava:29.0-jre'
        compile 'io.springfox:springfox-boot-starter:3.0.0'
        compile 'com.alibaba:fastjson:1.2.54'
        compile 'javax.validation:validation-api:2.0.1.Final'
        compile 'org.apache.commons:commons-lang3:3.11'
        compile 'commons-io:commons-io:2.6'
        compile 'com.auth0:jwks-rsa:0.14.0'
        compile 'com.auth0:java-jwt:3.11.0'
        compile 'org.bouncycastle:bcprov-jdk15on:1.66'

    }
}

// 將gradle build的個別jar集中放到dist
subprojects { Project subProject ->
    task copyArtifacts {
        doLast {
            def baseName = subProject.archivesBaseName
            def version = subProject.version
            def group = subProject.group
            def DIST_DIR = "${rootDir}/dist"
            def SRC_DIR = "${buildDir}/libs"

            ant.mkdir(dir: DIST_DIR)
            ant.copy(todir: DIST_DIR) {
                fileset(dir: SRC_DIR,
                        includes: "${baseName}*${version}*.jar,${baseName}*${version}*.zip")
            }
        }
    }

    afterEvaluate {
        def warTask = subProject.tasks.find { it.name == 'jar' }
        if (warTask) {
            warTask.finalizedBy(copyArtifacts)
        }
    }
}